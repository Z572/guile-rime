(define-module (rime main)
  #:use-module (rime config)
  #:use-module (rime structs)
  #:use-module (srfi srfi-1)
  #:export (test))

;; (define-record-type <rime>
;;   (make-rime ))
(define step 0)
(define-macro (printnl a v)

  `(begin
     (display step)
     (display "\t:| " )
     (display (quote ,a))
     (display " ")
     (display ,v)
     (newline)
     (set! step (1+ step))

     )
  ;; `(begin

  ;;    ;; (display ,a)

  ;;    ;;     (display #\tab)
  ;;    ;;(for-each display ,v)

  ;;    (newline)

  ;;    (set! step (1+ step)))
  )

(define (r-process-key session-id keycode mask)
  (process-key session-id keycode mask)
  (let* ((s (get-status session-id))
         (commit (get-commit session-id))
         (context (get-context session-id))
         (comp (context-composition context))
         (menu (context-menu context)))
    (display "--------------------")
    (display " commit: ") (display (commit-text commit)) (newline)
    (display " is-composing: " ) (display (status-is-composing s))
    (display " is-ascii-mode: " ) (display (status-is-ascii-mode s))
    (display " schema-name: "  ) (display (status-schema-name s)) (newline)
    (display " text-preview: " ) (display (context-commit-text-preview context))
    (display " preedit: "  )(display (composition-preedit comp))
    (display " cursor-pos: "  )(display (composition-cursor-post comp))
    (display " sel-start: "  )(display (composition-sel-start comp))
    (display " sel-end: "  )(display (composition-sel-end comp))
    (newline)
    ;;(display " commit-composition: ")(printnl commit-composition (commit-composition session-id))
    (newline)
    (display " page-size: ") (display (menu-page-size menu))
    (display " select-label: ") (display (context-select-labels context))
    (display " num-candidates: " ) (display (menu-num-candidates menu))
    (display " menu-candidates: " ) (display (map candidate-text (menu-candidates menu)))
    (free-context context)
    (newline)
    (free-status s)

    (free-commit commit)))

;; (define* (r-process-text session-id text #:optional (start 0) ())
;;   (simulate-key-sequence session-id text)
;;   (let ((candidate-list (candidate-list-begin session-id))
;;         (index 0))
;;     ))

(define (select-schema+save-config session-id schema-id)
  (let ((config (user-config-open "user")))
    (select-schema session-id schema-id)
    ;(config-get-string config "var/previously_selected_schema" s-id )
    (config-set-string config
                       "var/previously_selected_schema"
                       schema-id)
    (config-close config)))

(define* (test #:optional (traits (make-traits-bytestructure)))
  (setup traits)
  (initialize traits)

  (when (start-maintenance #t)
    (join-maintenance-thread))
  (define sessio (create-session))


  (printnl version (get-version))
  (printnl user-id (get-user-id))
  (printnl shared-data-dir (get-shared-data-dir))
  (printnl get-user-data-dir (get-user-data-dir))
  (printnl process-key (process-key sessio (char->integer #\k)
                                    0))
  ;; (printnl process-key (process-key sessio  (char->integer #\e)
  ;;                                   0))
                                        ;(printnl 'process-key (process-key sessio (char->integer #\n) 0))
  (let* ((statu (get-status sessio))
         (commi (get-commit sessio))
         (contex (get-context sessio)))
    (printnl stat "----- status -----" )
    (printnl get-current-schema (get-current-schema sessio ))
    (printnl id (status-schema-id statu))
    (printnl name (status-schema-name statu))
    (printnl get-staging-dir (get-staging-dir))
    (printnl get-prebuilt-data-dir (get-prebuilt-data-dir))
    (printnl is-ascii-mode (status-is-ascii-mode statu))
    (printnl is-disabled (status-is-disabled statu))
    (printnl is-composing (status-is-composing statu))
    (printnl is-ascii-punct (status-is-ascii-punct statu))
    (printnl is-full-shape (status-is-full-shape statu))
    (printnl is-simplified (status-is-simplified statu))
    (printnl is-traditional (status-is-traditional statu))
    (printnl get-user-data-sync-dir (get-user-data-sync-dir))
    (printnl commit-text (commit-text commi))
    (printnl commit-composition (commit-composition sessio))
    (printnl context-commit-text-preview (context-commit-text-preview contex))
    (printnl context-select-labels (context-select-labels contex))
    (let ((men (context-menu contex)))
      (printnl select-candidate (select-candidate sessio (- (random (menu-num-candidates men)) 1)))
      (printnl context-menu men)
      (printnl menu-page-size (menu-page-size men))
      (printnl menu-page-no (menu-page-no men))
      (printnl menu-num-candidates (menu-num-candidates men))
      (printnl menu-candidates-texts (map candidate-text (menu-candidates men)))
      (printnl menu-select-keys (menu-select-keys men))
      (printnl menu-candidates-comments (map candidate-comment (menu-candidates men)))
      (printnl menu-highlighted-candidate-index (menu-highlighted-candidate-index men )))
    (printnl context-composition-length (composition-length  (context-composition contex)))
    (printnl composition-cursor-post (composition-cursor-post (context-composition contex)))
    (printnl composition-sel-start (composition-sel-start (context-composition contex)))
    (printnl composition-sel-end (composition-sel-end (context-composition contex)))
    (printnl composition-preedit (composition-preedit (context-composition contex)))
    (destroy-session sessio)
    (free-status statu)
    (free-commit commi))


  (let ((l (schema-list-list (get-schema-list))))
    (printnl list-item-name (map schema-list-item-name l))

    (printnl list-item-id (map schema-list-item-id l))

    (let ((s-id (schema-list-item-id (last l)))
          (conf (user-config-open "user")))
      (select-schema sessio s-id)
      (config-set-string conf "var/previously_selected_schema" s-id )
      (config-set-string conf "var/name" (schema-list-item-name (second l)) )
      (config-set-bool conf "var/bool" #t )
      (config-set-int conf "var/int" 432 )
      (config-set-double conf "var/double" 43.1)
      (config-close conf))
    )
  (let loop ((sessi (create-session)))
    (let loop ((v (read-char)))
      (if (eof-object? v)
          (exit 0)
          (if (equal? v #\newline)
              (loop (pk 'ch (read-char)))
              (r-process-key sessi (char->integer v) 0))))

    ;; (string-for-each
    ;;  (lambda (key)
    ;;    (if (eof-object? key )
    ;;        (exit 0)
    ;;        (process-key sessi (char->integer key) 0)))
    ;;  (symbol->string
    ;;   (let ((s (read)))
    ;;     (if (eof-object? s)
    ;;         (exit 0)
    ;;         s)) ))


    (printnl > (let ((v 0))(map (lambda (a) (set! v (1+ v)) (string-append (number->string v) ". "
                                                                           (candidate-text a)
                                                                           "("(candidate-comment a) ")" ))
                                (menu-candidates (context-menu (get-context sessi))))))

    (loop sessi))
  ;; (sleep 1)
  (finalize)
  ;; (set-notification-handler
  ;;  (make-notification-handler-bytestructure)
  ;;  (lambda a (pk 'a a)))
  ;; (start-maintenance)
  )
(test)
